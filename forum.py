import requests
import time
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry


class Forum:
    SECONDS_BETWEEN_POSTS = 20

    def __init__(self, baseurl, username, password):
        self.baseurl = baseurl
        self.session = requests.session()
        self.session.headers['Accept'] = 'application/json'
        self.logged_in = False
        self.username = username
        self.password = password

        self.last_post = 0

    def login(self):
        if self.logged_in:
            return

        # retries = Retry(total=5, backoff_factor=10, status_forcelist=[429], method_whitelist=['POST'])
        # self.session.mount('http://', HTTPAdapter(max_retries=retries))

        csrf_resp = self.session.get(
            self.url('session/csrf'), data={'_': time.time()*1000})
        csrf_resp.raise_for_status()

        self.session.headers['X-CSRF-Token'] = csrf_resp.json()['csrf']

        login_resp = self.session.post(
            self.url('session'), data=dict(login=self.username, password=self.password))
        if login_resp.status_code == 429:
            print(login_resp.json())
        login_resp.raise_for_status()

        check_resp = self.session.get(self.url('session/current.json'))
        check_resp.raise_for_status()

        self.logged_in = True

    def url(self, endpoint):
        return f"{self.baseurl}/{endpoint}"

    def messages(self):
        self.login()
        return self.session.get(self.url(f'topics/private-messages/{self.username}.json'))

    def send_private_message(self, recipients, title, body):
        self.login()

        data = {
            'raw': f"{body}\n\n<sub>This post generated by [Yomi Auto TO](https://github.com/cpennington/yomi-auto-to).</sub>",
            'title': title,
            'unlist_topic': 'false',
            'category': '',
            'is_warning': 'false',
            'archetype': 'private_message',
            'target_usernames': ",".join(recipients),
            'typing_duration_msecs': 0,
            'composer_open_duration_msecs': 0,
            'featured_link': '',
            'nested_post': 'true',
        }
        seconds_since_last_post = time.time() - self.last_post
        if seconds_since_last_post < self.SECONDS_BETWEEN_POSTS:
            time.sleep(self.SECONDS_BETWEEN_POSTS - seconds_since_last_post)

        resp = self.session.post(self.url('posts'), data=data)
        self.last_post = time.time()
        return resp

    def search_user(self, name):
        self.login()

        return self.session.get(
            self.url('/u/search/users'),
            data={
                'term': name,
                'include_groups': 'false',
                'include_mentionable_groups': 'false',
                'include_messageable_groups': 'true',
                'topic_allowed_users': 'false',
            }
        )
